#################################
#############SDG2#################
#################################
install.packages("economiccomplexity")
library("economiccomplexity")
devtools::install_github("pachamaltese/economiccomplexity")
library("devtools")
setwd("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper")
library(haven)
library("readr")
data <- read.csv("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper/data_SDG2.txt", na.strings="99")
split<-split(data, data$wave)        
data2018<-split$'2021'   #change_with_2021
a2018<-subset(data2018, select = c(2,4,8))
bi<-balassa_index(a2018,discrete = T, cutoff = 0.01, country = "rfo_id",product = "SDG2",value = "norm_Budget")
com_fit <- complexity_measures(bi)
com_fit$complexity_index_country[1:5]
com_fit$complexity_index_product[1:5]
com_ref <- complexity_measures(bi, method = "reflections")
com_ref$complexity_index_country[1:5]
com_ref$complexity_index_product[1:5]
com_eig <- complexity_measures(bi, method = "eigenvalues")
com_eig$complexity_index_country[1:5]
com_eig$complexity_index_product[1:5]
pro <- proximity(bi)
pro$proximity_country[1:5,1:5]
pro$proximity_product[1:5,1:5]
library("xlsx")
fit_agency<-as.data.frame(com_fit$complexity_index_country) 
write.xlsx(fit_agency, file = "fit_country_SDG2.xlsx", col.names = TRUE, row.names = TRUE)
fit_cat<-as.data.frame(com_fit$complexity_index_product) 
write.xlsx(fit_cat, file = "fit_cat_SDG2.xlsx", col.names = TRUE, row.names = TRUE)
proximity_agency<-as.matrix(pro$proximity_country) 
write.xlsx(proximity_agency, file = "proximity_agency_SDG2.xlsx", col.names = TRUE, row.names = TRUE)
##########################################################################################
library(igraph)
net <- projections(pro$proximity_country, pro$proximity_product)
E(net$network_country)[1:5]
E(net$network_product)[1:5]
set.seed(200100)
library(Matrix)
library(ggraph)
aggregated_country <- aggregate(
  a2018$norm_Budget,
  by = list(country = a2018$rfo_id),
  FUN = sum
)
aggregated_countries <- setNames(aggregated_country$x, aggregated_country$country)
V(net$network_country)$size <- aggregated_countries[match(V(net$network_country)$name, names(aggregated_countries))]
dev.new(width = 10,
        height = 3) 
p<-ggraph(net$network_country, layout = "kk") +
  # geom_edge_link(aes(edge_width = weight), edge_colour = "#a8a8a8") +
  geom_edge_link(edge_colour = "#a8a8a8") +
  geom_node_point(aes(size = size), color = "orange3") +
  geom_node_text(aes(label = name), size = 2, vjust = 2.2, check_overlap=T, repel=F) +
  ggtitle("Proximity Based Network Projection for RFO") +
  theme_void() 
p + theme(legend.position="bottom")
p + theme(legend.position = c(0.1, 0.6))
##########################################################################################
# Librerie necessarie
library(igraph)
library(ggraph)
library(Matrix)
library(ggrepel) # Per evitare sovrapposizioni delle etichette

# Creazione delle proiezioni
net <- projections(pro$proximity_country, pro$proximity_product)

# Definizione delle dimensioni dei nodi in base all'aggregazione del budget
aggregated_country <- aggregate(
  a2018$norm_Budget,
  by = list(country = a2018$rfo_id),
  FUN = sum
)
aggregated_countries <- setNames(aggregated_country$x, aggregated_country$country)
V(net$network_country)$size <- aggregated_countries[match(V(net$network_country)$name, names(aggregated_countries))]

# Grafico 1 con linee scure e nodi arancioni brillanti
set.seed(200100)
p1 <- ggraph(net$network_country, layout = "kk") +
  geom_edge_link(edge_colour = "grey30", edge_width = 0.5) +  # Linee pi첫 scure e sottili
  geom_node_point(aes(size = size), color = "darkorange") +   # Nodi arancione brillante
  geom_node_text(aes(label = name), size = 3, repel = TRUE) + # Evita sovrapposizioni con repel
  ggtitle("Proximity-Based Network Projection for RFO (Graph 1)") +
  theme_void() +
  theme(legend.position = "bottom")

# Visualizza il primo grafico
print(p1)

# Grafico 2 con le stesse modifiche di stile
p2 <- ggraph(net$network_country, layout = "kk") +
  geom_edge_link(edge_colour = "grey30", edge_width = 0.5) +  # Linee pi첫 scure e sottili
  geom_node_point(aes(size = size), color = "darkorange") +   # Nodi arancione brillante
  geom_node_text(aes(label = name), size = 3, repel = TRUE) + # Evita sovrapposizioni con repel
  ggtitle("Proximity-Based Network Projection for RFO (Graph 2)") +
  theme_void() +
  theme(legend.position = c(0.1, 0.6))

# Visualizza il secondo grafico
print(p2)

#####################################################################################
set.seed(200100)
aggregated_products <- aggregate(
  a2018$norm_Budget,
  by = list(country = a2018$SDG2),
  FUN = sum
)
aggregated_products <- setNames(aggregated_products$x, aggregated_products$country)
V(net$network_product)$size <- aggregated_products[match(V(net$network_product)$name, names(aggregated_products))]
p<-ggraph(net$network_product, layout = "kk") +
  # geom_edge_link(aes(edge_width = weight), edge_colour = "#a8a8a8") +
  geom_edge_link(edge_colour = "#a8a8a8") +
  geom_node_point(aes(size = size), color = "orange3") +
  geom_node_text(aes(label = name), size = 2, vjust = 2.2, check_overlap=T, repel=T) +
  ggtitle("Proximity Based Network Projection for SGC") +
  theme_void()
p + theme(legend.position = c(0.9, 0.5))

###########################################################
##########################################################################################
# Librerie necessarie
library(igraph)
library(ggraph)
library(Matrix)
library(ggrepel) # Per evitare sovrapposizioni delle etichette

# Set di partenza
set.seed(200100)

# Aggregazione dei prodotti in base al budget
aggregated_products <- aggregate(
  a2018$norm_Budget,
  by = list(country = a2018$SDG2),
  FUN = sum
)
aggregated_products <- setNames(aggregated_products$x, aggregated_products$country)
V(net$network_product)$size <- aggregated_products[match(V(net$network_product)$name, names(aggregated_products))]

# Creazione del grafico con colori migliorati e opzione repel per etichette
p <- ggraph(net$network_product, layout = "kk") +
  geom_edge_link(edge_colour = "grey30", edge_width = 0.5) +  # Linee pi첫 scure e sottili
  geom_node_point(aes(size = size), color = "darkorange") +   # Nodi arancione brillante
  geom_node_text(aes(label = name), size = 3, repel = TRUE, max.overlaps = Inf, nudge_y = -0.05) + # Maggior controllo su repel e posizionamento etichette in basso
  ggtitle("Proximity-Based Network Projection for SGC") +
  theme_void() +
  theme(legend.position = c(0.1, 0.3))

# Visualizza il grafico
print(p)




################################################################
cols_f <- colorRampPalette(RColorBrewer::brewer.pal(11, 'Spectral'))
p<-ggraph(net$network_product, layout="tree") +
  # geom_edge_link(aes(edge_width = weight), edge_colour = "#a8a8a8") +
  geom_edge_link(edge_colour = "#a8a8a8") +
  geom_node_point(aes(size = size), size= 5, color = cols_f(vcount(net$network_product))) +
  geom_node_text(aes(label = name), size = 2.5, vjust = 2.5, check_overlap = T,repel=F) +
  ggtitle("Proximity Based Network Projection for SGC") +
  theme_void()
p + theme(legend.position = c(0.8, 0.6))

#########################################################################################################################################

##########################################################################################
# Librerie necessarie
library(igraph)
library(ggraph)
library(Matrix)
library(RColorBrewer)
library(ggrepel) # Per evitare sovrapposizioni delle etichette

# Definizione della palette di colori
cols_f <- colorRampPalette(RColorBrewer::brewer.pal(11, 'Spectral'))

# Creazione del grafico con link scuri e distribuzione ottimizzata delle etichette
p <- ggraph(net$network_product, layout = "tree") +
    geom_edge_link(edge_colour = "grey30", edge_width = 0.5) +  # Linee nere
    geom_node_point(aes(size = size), size = 5, color = cols_f(vcount(net$network_product))) + # Colori per i nodi
    geom_node_text(aes(label = name), size = 3, repel = TRUE, max.overlaps = Inf, nudge_y = -0.05) + # Pi첫 distanza verso il basso per etichette
    ggtitle("Proximity-Based Network Projection for SGC") +
    theme_void() +
    theme(legend.position = c(0.8, 0.6))

# Visualizza il grafico
print(p)


#########################################################################################################################################
library("colorspace")
library("pheatmap")
library("diverse")
library("devtools")
setwd("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper")
library(haven)
library("readr")
data <- read.csv("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper/data_SDG2.txt", na.strings="99")
split<-split(data, data$wave)        
data2018<-split$'2021'    # change
a2018<-subset(data2018, select = c(2,4,8))
colfunc <- colorRampPalette(c("deepskyblue4", "deepskyblue2", "orange"))
plot_mat <- function(data)
  pheatmap(data, colfunc(300), cluster_rows = FALSE, cluster_cols = FALSE,legend = T,border_color = "black", fontsize = 8, angle_col = c( "90"))
col_l <- names(sort(colSums(values(a2018)))) #order
row_l <- names(sort(rowSums(values(a2018)), decreasing = TRUE))
#plot_mat(values(a2018)[row_l,col_l])
#plot_mat(values(a2018, norm = 'p')[row_l,col_l])
plot_mat(values(a2018, norm = 'ai')[row_l,col_l])
#plot_mat(values(a2018, norm = 'rca', filter = 1)[row_l,col_l])
variety(data = a2018)
a2018_rca_fil <- values(data = a2018, norm = 'rca', filter = 1)
RCA_2018<-as.data.frame(a2018_rca_fil)
write.csv(RCA_2018, "RCA_2021.csv")
variety(a2018_rca_fil)
ubiquity(data = a2018)
round(diversity(data = a2018, type = c('hhi', 'gs', 'b','ev')), 3)
adj <- dis_categories(data = a2018, method = 'cosine')
library(igraph)
g <- graph.adjacency(adjmatrix = adj, mode = 'undirected', weighted = TRUE)
totals <- colSums(values(a2018))
V(g)$size = log(totals[match(V(g)$name, names(totals))], base = 2) - 9
fc <- fastgreedy.community(g); colors <- rainbow(max(membership(fc)))
V(g)$color = colors[membership(fc)]
set.seed(67)
g$layout <- layout_with_kk(g)
plot.igraph(g, vertex.label.cex = 0.6, vertex.label.font = 0, vertex.label.family = 'Helvetica', vertex.label.color='black', asp=T,vertex.size=6, vertex.label.dist=0.5, vertex.color="orange", edge.color="gray",edge.width=1,edge.arrow.size=1, layout=layout.drl, check_overlap = T, repel=T)
round(dis_entities(a2018, method = 'cosine'), 2)
a2018_rca_fil <- values(a2018, norm = 'rca', filter = 1)
disparity(a2018_rca_fil)
a2018_rca_fil <- values(a2018, norm = 'rca', filter = 1)
diversity(data = a2018_rca_fil, type = c('rao', 'rs') , alpha=0.7, beta = 0.3, method = 'cosine')

######################################################################################################################################################################
##################FUNDING_Graph by COUNTRY#######################################################################################################################################
######################################################################################################################################################################
setwd("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper")
funding <- read.delim("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper/funding_country_SDG2.csv")
library(ggplot2)
library(reshape2)
pcm = melt(funding, id = c("reference_year"))
colours = c( "#A54657",  "#582630", "#F7EE7F", "#4DAA57","#F1A66A","#F26157", "#F9ECCC", "#679289", "#33658A","#F6AE2D","#86BBD8")
pcm$Sample <- factor(pcm$reference_year,levels=unique(pcm$reference_year))
p = ggplot(pcm, aes(x = Sample, y = variable)) + 
  geom_point(aes(size = value, fill = variable), alpha = 0.75, shape = 21) + 
  scale_size_continuous(limits = c(0.1, 100), range = c(1,20), breaks = c(5,15,30,50)) + 
  labs( x= "", y = "", size = "Funding (%)", fill = "")  + 
  theme(legend.key=element_blank(), axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), axis.text.y = element_text(colour = "black", face = "bold", size = 11), legend.text = element_text(size = 8, face ="bold", colour ="black"), 
        legend.title = element_text(size = 10, face = "bold"),panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), legend.position = "right") +     
  scale_fill_manual(values = colours, guide = FALSE) + 
  scale_y_discrete(limits = rev(levels(pcm$variable))) 
p
################################################################################################################
###########################Agency level#########################################################################
setwd("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper")
funding <- read.delim("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper/funding_agency_SDG2.csv")
library(ggplot2)
library(reshape2)
pcm = melt(funding, id = c("reference_year"))
colours = c( "#A54657",  "#582630", "#F7EE7F", "#4DAA57","#F1A66A","#F26157", "#F9ECCC","#679289", "#33658A","#F6AE2D", "#86BBD8", "#A54657",  "#582630", "#F7EE7F", "#4DAA57","#F1A66A","#F26157", "#F9ECCC", "#679289", "#33658A","#F6AE2D", "#86BBD8","#A54657",  "#582630", "#F7EE7F", "#4DAA57","#F1A66A","#F26157", "#F9ECCC", "#679289", "#33658A","#F6AE2D", "#86BBD8","#A54657",  "#582630", "#F7EE7F", "#4DAA57","#F1A66A","#F26157", "#F9ECCC", "#679289", "#33658A","#F6AE2D", "#86BBD8","#582630", "#F1A66A","#F26157", "#F9ECCC", "#679289", "#33658A","#F6AE2D")
pcm$Sample <- factor(pcm$reference_year,levels=unique(pcm$reference_year))
p = ggplot(pcm, aes(x = Sample, y = variable)) + 
  geom_point(aes(size = value, fill = variable), alpha = 0.70, shape = 21) + 
  scale_size_continuous(limits = c(0.000001, 100), range = c(1,10), breaks = c(1, 5,15,25,40)) + 
  labs( x= "", y = "", size = "Funding(%)", fill = "")  + 
  theme(legend.key=element_blank(), axis.text.x = element_text(colour = "black", size = 10, face = "bold", angle = 90, vjust = 0.3, hjust = 1), axis.text.y = element_text(colour = "black", face = "bold", size = 7), legend.text = element_text(size = 8, face ="bold", colour ="black"), legend.title = element_text(size = 10, face = "bold"), 
        panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 0.2), legend.position = "right") +  
  scale_fill_manual(values = colours, guide = "none") + 
  scale_y_discrete(limits = rev(levels(pcm$variable))) 
p
############################################################################################################
############################################dyncomp PACKAGE#################################################
setwd("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper")
funding <- read.delim("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper/funding_fluctuation.csv")
library(ggplot2)
library(reshape2)
pcm = melt(funding, id = c("reference_year"))
pcm$Sample <- factor(pcm$reference_year,levels=unique(pcm$reference_year))
for (i in pcm$variable){
  p<-split(pcm, pcm$variable)
}
AT5001<-p[["AT5001"]][["value"]]
AT5001 <- sort(AT5001)
library("psych")
fobs <- mssd(AT5001)
fmax <- mssd(rep_len(c(1, 100), length.out = 9))
fobs/fmax
emp.diff <- diff(AT5001, lag=1)
uniform <- seq(from = 1, to = 100, length.out = 9)
uni.diff <- diff(uniform, lag=1)
uni.diff
emp.diff <- diff(AT5001, lag=1)
deviation <- uni.diff - emp.diff
dev.h <- deviation * ((sign(deviation) + 1)/2)
div.diff <- dev.h / uni.diff
div.diff
mean(div.diff)
################################################################################################################
###############################################################Fitness command##################################
################################################################################################################
#' @name
#' fitness
#'
#' @title
#' Regional Fitness and/or Technological Complexity
#'
#' @description
#' The function computes the fitness index of each region (i.e.
#' its \emph{competitiveness}), in line with the methodology proposed by
#' Pietronero and coauthors.
#'
#' @references
#' Tacchella, Cristelli, Caldarelli, Gabrielli and Pietronero (2012)
#' ``A New Metrics for Countries' Fitness and Products' Complexity'',
#' \emph{Scientific Reports}, 2, 1--7;
#'
#' Tacchella, Cristelli, Caldarelli, Gabrielli and Pietronero (2013)
#' ``Economic Complexity: Conceptual Grounding of a New Metrics for Global
#' Competitiveness'', \emph{Journal of Economic Dynamics and Control}, 37,
#' 1683--1691;
#'
#' Cristelli, Gabrielli, Tacchella, Caldarelli and Pietronero (2013)
#' ``Measuring the Intangibles: A Metrics for the Economic Complexity of
#' Countries and Products'', \emph{PLoS ONE}, 8, e70726;
#'
#' @encoding UTF-8
#'
#' @param occt Contingency table (i.e., occurrence table or incidence
#' matrix) on which you want to compute the indices. It can be a 2D array,
#' in which the first dimension represents the units of analysis (like firms,
#' regions, or countries), and the second dimension represents the
#' events or characteristics of interest (like the classes of the patents
#' produced by the regions, or the sectors in which the workers belongs).
#' Lastly, the values in each cell represents the occurrences of each unit-event
#' pair. Moreover, you can use also a 3D array if you like, in which the third
#' dimension represents the time. The object is expected to be of "table" class.
#' @param rta If TRUE (default) it uses the Revealed Technological Advantages
#' (RTA) of the original data
#' @param binary If TRUE (default) it dichotomize the RTA matrix
#' (can be used only together with rta=TRUE).
#' @param which It can be one of "fitness" (default), "complexity", "both".
#' The first returns the fitness of each region; the second returns the
#' complexity of each technological domain; and the third returns both the
#' indices.
#'
#' @return A data.frame with the Fitness of each region and/or the Complexity of
#' each technological domain. If a 3D array is provided as input, it returns the
#' full panel data.frame.
#'
#' @examples
#' geo <- paste0("R", 10:50)
#' tech <- paste0("T", 10:90)
#' time <- 1:5
#' dat <- expand.grid(geo, tech, time)
#' colnames(dat) <- c("geo", "tech", "time")
#' set.seed(1)
#' dat$nPat <- sample(1:200, nrow(dat), replace = TRUE)
#' octab <- xtabs(nPat ~ geo + tech + time, dat)
#' octab[sample(1:length(octab), length(octab)/2)] <- 0
#' FX <- fitness(octab)
#' attr(FX, "convergence")
#'
#' @export

# @importFrom methods as is

fitness <- function(occt,
                    rta = TRUE,
                    binary = TRUE,
                    which = "fitness") {
  
  #-- Preliminary steps and checks
  info <- data_info(occt)
  
  #-- Main function
  if (info$n_dims == 3) {
    index <- apply(occt, 3, fitness, rta, binary, which)
    i <- sapply(index, attr, "iterations")
    c <- sapply(index, attr, "convergence")
    if (which == "both") {
      Fx <- lapply(index, function(x) {
        unique(x[, c(1, 3)])
      })
      Cx <- lapply(index, function(x) {
        unique(x[, c(2, 4)])
      })
      index <- list(Fx = Fx,
                    Cx = Cx)
    }
  } else {
    occt <- remove_zeros(occt)
    spm <- any(methods::is(occt) == "sparseMatrix")
    if (isTRUE(rta)) {
      occt <- rta(occt, binary)
    }
    Fx <- rep(1, nrow(occt))
    Cx <- rep(1, ncol(occt))
    if (spm) {
      Fx <- Matrix::c.sparseVector(Fx)
      Cx <- Matrix::c.sparseVector(Cx)
    }
    i <- 0
    while (TRUE) {
      Fx1 <- Matrix::t(occt) * Cx
      Fx1 <- Matrix::rowSums(Matrix::t(Fx1))
      Cx1 <- 1 / Matrix::rowSums(Matrix::t(occt / Fx))
      # Normalisation needed to avoid possible divergences
      #  due to the hyperbolic nature of the second equation
      Fx1 <- Fx1 / mean(Fx1)
      Cx1 <- Cx1 / mean(Cx1)
      # TODO
      # This is an arbitrary choice of mine and it is not in the
      #  original papers. Maybe it could be better and closer to the
      #  original sources to use 20 recursions. Another thing to check
      #  and decide is what happens in the function if the algorithm
      #  does not converge
      if (all(Fx - Fx1 < 0.0000000001) &
          all(Cx - Cx1 < 0.0000000001)) {
        Fx <- Fx1
        Cx <- Cx1
        c <- TRUE
        break
      }
      if (i >= 200) {
        Fx <- rep(as.numeric(NA), nrow(occt))
        Cx <- rep(as.numeric(NA), ncol(occt))
        names(Fx) <- names(Fx1)
        names(Cx) <- names(Cx1)
        c <- FALSE
        break
      }
      Fx <- Fx1
      Cx <- Cx1
      i <- i + 1
    }
    index <- switch(which,
                    fitness = Fx,
                    complexity = Cx,
                    both = list(Fx = Fx,
                                Cx = Cx))
  }
  
  #-- Final steps
  index <- switch(which,
                  fitness = wide_to_long(index,
                                         info$n_dims,
                                         info$dim_nms[info$nd[[1]]],
                                         "fitness"),
                  complexity = wide_to_long(index,
                                            info$n_dims,
                                            info$dim_nms[info$nd[[2]]],
                                            "complexity"),
                  both = merge(wide_to_long(index$Fx,
                                            info$n_dims,
                                            info$dim_nms[info$nd[[1]]],
                                            "fitness"),
                               wide_to_long(index$Cx,
                                            info$n_dims,
                                            info$dim_nms[info$nd[[2]]],
                                            "complexity"),
                               all = TRUE)[, c(info$n_dims - 1,
                                               info$n_dims + 1,
                                               info$n_dims - 2,
                                               info$n_dims,
                                               info$n_dims + 2)]
  )
  attr(index, "iterations") <- i
  attr(index, "convergence") <- c
  return(index)
}
install.packages("remotes")
remotes::install_github("n3ssuno/ReKS", force = TRUE)
geo <- paste0("R", 10:50)
tech <- paste0("T", 10:90)
time <- 1:5
dat <- expand.grid(geo, tech, time)
colnames(dat) <- c("geo", "tech", "time")
set.seed(1)
dat$nPat <- sample(1:200, nrow(dat), replace = TRUE)
octab <- xtabs(nPat ~ geo + tech + time, dat)
octab[sample(1:length(octab), length(octab)/2)] <- 0
FX <- fitness(octab)
attr(FX, "convergence")
##################################################################################################################################################################################
###############################################GRAPH##############################################################################################################################
##################################################################################################################################################################################
library(readxl)
setwd("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper")
library(ggplot2)
Graph_correlation <- read_excel("fluctuation.xlsx")
ggplot(Graph_correlation, aes(x = CI_1, y = CI_2)) +
  geom_point() + # Show dots
  geom_text(
    label=rownames(Graph_correlation), 
    nudge_x = 0.25, nudge_y = 0.25, 
    check_overlap = T
  )
################by#Country################################################################
library(ggplot2)
Graph_correlation <- read_excel("fluctuation.xlsx")
p<-ggplot(Graph_correlation, aes(x = CI_1, y = CI_2, label = rownames(Graph_correlation))) +
  geom_point() + # Show dots
  geom_text(label=rownames(Graph_correlation), nudge_x = 1, nudge_y = 1, check_overlap = F)
p + geom_text()
###########################Scale reverse#######################################################
library(ggplot2)
Graph_correlation <- read_excel("fluctuation.xlsx")
p<-ggplot(Graph_correlation, aes(x = CI_1, y = CI_2, label = rownames(Graph_correlation))) +
  geom_point() + geom_text(label=rownames(Graph_correlation))+ scale_x_continuous(trans = 'reverse')+ scale_y_continuous(trans = 'reverse')
p + geom_text()

#############################Log scale##############################################
library("scales")
ggplot(Graph_correlation, aes(x = CI_1, y = CI_2, label = rownames(RFO))) + 
  geom_point() + scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
  geom_text(label=rownames(Graph_correlation), nudge_x = 1, nudge_y = 1, check_overlap = T)
*********
library("scales")
library("ggrepel")
p<-ggplot(Graph_correlation, aes(x = CI_2, y = CI_1, label=RFO))  +geom_point(aes(size = GBARD, color=RFO_domain)) + 
  xlab('CI_2') + ylab('CI_1')+ scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
  geom_text(label=Graph_correlation$RFO, nudge_x = 1, nudge_y = 1, check_overlap = T, size = 3 )
p + theme_classic()+geom_text_repel(size=3)

************************************
library("scales")
library("ggrepel")
p<-ggplot(Graph_correlation, aes(x = CI_2, y = CI_1, label=RFO))  +geom_point(aes(size = GBARD, color=RFO_domain)) + 
  xlab('CI_2') + ylab('CI_1')+ scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) 
p + theme_classic()+geom_text_repel(size=3, max.overlaps = getOption("ggrepel.max.overlaps", default = 100))
***********************************************************
xyplot(Graph_correlation$normal_x1) ~ Graph_correlation$j, groups = Graph_correlation$country, type= "b", data= Graph_correlation,  auto.key = list(columns = 2), ylab = "CI", xlab = "WAVE", scales = list (x = list(at = c(1, 2)))) 

****************************
  library(igraph)
library(qgraph)
ab<-as.matrix(bi)
data_keep_rows <- c("AT5001")    
rownames(ab) <- row.names(ab)
aa <- ab[rownames(ab) %in% data_keep_rows,] 
net2 <- graph_from_incidence_matrix(aa)
V(net2)$color <- c("steel blue", "orange")[V(net2)$type+1]
V(net2)$shape <- c("sphere", "sphere")[V(net2)$type+1]
V(net2)$label.cex=.70
V(net2)$label.font=24
l <- layout_with_fr(net2)
e <- get.edgelist(net2,names=FALSE)
plot(net2, edge.lty="dashed", edge.color="black", edge.curved=0.3 , vertex.label.color="black",vertex.size = 9,check_overlap = T, vertex.label.cex=0.6,layout=l,vertex.label.dist=3, vertex.size=(2-V(net2)$type)*8)
cfg <- cluster_fast_greedy(as.undirected(net2))
l <- layout_with_fr(net2)
###################
Isolated = which(degree(net2)==0)
net2 = delete.vertices(net2, Isolated)
lo = l[-Isolated,]
##################
plot(net2, edge.lty="dashed", layout=lo,edge.color="black", edge.curved=0.3 , vertex.label.color="black",vertex.size = 9,check_overlap = T, vertex.label.cex=0.6,vertex.label.dist=3, vertex.size=(2-V(net2)$type)*8)
plot(cfg, as.undirected(net2), edge.lty="dashed", layout=l,edge.color="black", edge.curved=0.3 , vertex.label.color="black",vertex.size = 9,check_overlap = T, vertex.label.cex=0.6,vertex.label.dist=3, vertex.size=(2-V(net2)$type)*8)
######################################################################################################################
#####################EGO NETWORK####################################################################################
library("economiccomplexity")
library("devtools")
setwd("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper")
library(haven)
library("readr")
data <- read.csv("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper/data_SDG2.txt", na.strings="99")
split<-split(data, data$wave)        
data2018<-split$'2021'  #change
a2018<-subset(data2018, select = c(2,4,8))
bi<-balassa_index(a2018,discrete = T, cutoff = 0.01, country = "rfo_id",product = "SDG2",value = "norm_Budget")
library(igraph)
library(qgraph)
ab<-as.matrix(bi)
net2 <- graph_from_incidence_matrix(ab)
b1 <- ego(net2)
ListOfGraphs = lapply(b1, function(x) induced_subgraph(net2, x))
par(mfrow=c(1,2))   
class(ListOfGraphs[[1]])
V(ListOfGraphs[[1]])$color <- c("steel blue", "orange")[V(ListOfGraphs[[1]])$type+1]
V(ListOfGraphs[[1]])$shape <- c("sphere", "sphere")[V(ListOfGraphs[[1]])$type+1]
V(ListOfGraphs[[1]])$label.cex=.70
V(ListOfGraphs[[1]])$label.font=24
l <- layout_with_fr(ListOfGraphs[[1]])
e <- get.edgelist(ListOfGraphs[[1]],names=FALSE)
plot(ListOfGraphs[[1]], edge.lty="dashed", edge.color="black", edge.curved=0.3 , vertex.label.color="black",vertex.size = 9,check_overlap = T, vertex.label.cex=0.6,layout=l,vertex.label.dist=3, vertex.size=(2-V(net2)$type)*8)
cfg <- cluster_fast_greedy(as.undirected(ListOfGraphs[[1]]))
l <- layout_with_fr(ListOfGraphs[[1]])
plot(ListOfGraphs[[1]], edge.lty="dashed", layout=l,edge.color="black", edge.curved=0.3 , vertex.label.color="black",vertex.size = 9,check_overlap = T, vertex.label.cex=0.6,vertex.label.dist=3, vertex.size=(2-V(net2)$type)*8)
###
class(ListOfGraphs[[2]])
V(ListOfGraphs[[2]])$color <- c("steel blue", "orange")[V(ListOfGraphs[[2]])$type+1]
V(ListOfGraphs[[2]])$shape <- c("sphere", "sphere")[V(ListOfGraphs[[2]])$type+1]
V(ListOfGraphs[[2]])$label.cex=.70
V(ListOfGraphs[[2]])$label.font=24
l <- layout_with_fr(ListOfGraphs[[2]])
e <- get.edgelist(ListOfGraphs[[2]],names=FALSE)
plot(ListOfGraphs[[2]], edge.lty="dashed", edge.color="black", edge.curved=0.3 , vertex.label.color="black",vertex.size = 9,check_overlap = T, vertex.label.cex=0.6,layout=l,vertex.label.dist=3, vertex.size=(2-V(net2)$type)*8)
cfg <- cluster_fast_greedy(as.undirected(ListOfGraphs[[2]]))
l <- layout_with_fr(ListOfGraphs[[1]])
plot(ListOfGraphs[[2]], edge.lty="dashed", layout=l,edge.color="black", edge.curved=0.3 , vertex.label.color="black",vertex.size = 9,check_overlap = T, vertex.label.cex=0.6,vertex.label.dist=3, vertex.size=(2-V(net2)$type)*8)
#######################################################
library("economiccomplexity")
library("devtools")
setwd("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper")
library(haven)
library("readr")
data <- read.csv("C:/Users/azini/Dropbox/Antonio/LAVORI CNR e Altro/Complexity_paper/data_SDG2.txt", na.strings="99")
split<-split(data, data$reference_year)        
data2018<-split$'2021'  #change
a2018<-subset(data2018, select = c(2,4,8))
bi<-balassa_index(a2018,discrete = T, cutoff = 0.01, country = "rfo_id",product = "SDG2",value = "norm_Budget")
library(igraph)
library(qgraph)
ab<-as.matrix(bi)
ab<-as.matrix(bi)[c(1,2,3,4), ] #CH 5,6 #CZ 7,8,9,10,11,12,13,14#DE 15,16,17,18,19 #DK20,21,22# EE 23,24# NO 26,27# UK 28,29,30,31,32,33,34,35,36,37,38,39
net2 <- graph_from_incidence_matrix(ab)
V(net2)$color <- c("steel blue", "orange")[V(net2)$type+1]
V(net2)$shape <- c("sphere", "sphere")[V(net2)$type+1]
V(net2)$label.cex=.70
V(net2)$label.font=24
l <- layout.davidson.harel(net2)
l <- layout_components(net2)
Isolated = which(degree(net2)==0)
net2 = delete.vertices(net2, Isolated)
l2 = l[-Isolated,]
e <- get.edgelist(net2,names=FALSE)
plot(net2, edge.lty="dashed", edge.color="black", edge.curved=0.3 , vertex.label.color="black",vertex.size = 8,check_overlap = T, vertex.label.cex=0.6,layout=l2,vertex.label.dist=1, vertex.size=(2-V(net2)$type)*8)
